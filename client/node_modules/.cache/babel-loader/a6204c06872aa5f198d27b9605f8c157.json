{"ast":null,"code":"import _objectSpread from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/mnt/c/Users/Ben Brackenbury/CS Project/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/mnt/c/Users/Ben Brackenbury/CS Project/client/src/Pages/Category/Category.js\";\nimport React, { Component } from 'react';\nimport Cookies from 'universal-cookie';\nimport axios from 'axios';\nimport './Category.css';\nimport Post from '../../Components/Post/Post';\nvar cookies = new Cookies();\n\nvar Category =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Category, _Component);\n\n  function Category() {\n    var _this;\n\n    _classCallCheck(this, Category);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Category).call(this));\n    _this.state = {\n      category: 'Category',\n      posts: [],\n      postCount: '',\n      sort: ''\n    };\n    _this.sortChange = _this.sortChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Category, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      if (!cookies.get('user')) window.location = '/login';\n      var token = cookies.get('token');\n      var path = this.props.location.pathname;\n      if (path == '/category' || path == '/category/') alert('no category provides');\n      var category = path.split('/category/')[1];\n      this.setState({\n        category: category\n      });\n      axios.get(\"/api/post/category/\".concat(category, \"?token=\").concat(token)).catch(function (err) {\n        return console.error(err);\n      }).then(function (response) {\n        var posts = response.data.result;\n        var newPostArray = [];\n        var postIDs = posts.map(function (post) {\n          return post.id;\n        });\n\n        var uniquePostIDs = _toConsumableArray(new Set(postIDs));\n\n        uniquePostIDs.map(function (uid) {\n          var resultsWithThisID = [];\n          posts.map(function (post) {\n            if (post.id == uid && post.payload) {\n              resultsWithThisID.push(post.payload);\n            }\n          });\n          var payloadSum = 0;\n          resultsWithThisID.map(function (r) {\n            return payloadSum += r;\n          });\n          var postsWithThisID = posts.map(function (p) {\n            if (p.id == uid) return p;\n          });\n          var thisPost = {};\n          postsWithThisID.map(function (p) {\n            if (typeof p !== 'undefined') {\n              thisPost = p;\n              return;\n            }\n          });\n          newPostArray.push(_objectSpread({}, thisPost, {\n            votes: payloadSum\n          }));\n        });\n        newPostArray = newPostArray.sort(function (a, b) {\n          return b.id - a.id;\n        });\n        var postCount = \"\".concat(newPostArray.length, \" \").concat(newPostArray.length == 1 ? 'Post' : 'Posts');\n\n        _this2.setState({\n          posts: newPostArray,\n          postCount: postCount\n        });\n      });\n    }\n  }, {\n    key: \"sortChange\",\n    value: function sortChange(e) {\n      var sort = e.target.value;\n\n      switch (sort) {\n        case 'newest':\n          this.setState({\n            posts: this.state.posts.sort(function (a, b) {\n              return b.id - a.id;\n            })\n          });\n          break;\n\n        case 'oldest':\n          this.setState({\n            posts: this.state.posts.sort(function (a, b) {\n              return a.id - b.id;\n            })\n          });\n          break;\n\n        case 'votes':\n          this.setState({\n            posts: this.state.posts.sort(function (a, b) {\n              return a.id - b.id;\n            })\n          });\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"Category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.state.category), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.postCount), React.createElement(\"select\", {\n        name: \"sort\",\n        id: \"sort-select\",\n        onChange: this.sortChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"newest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Newest first\"), React.createElement(\"option\", {\n        value: \"oldest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Oldest first\"), React.createElement(\"option\", {\n        value: \"votes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Most votes\"))), React.createElement(\"div\", {\n        className: \"PostsView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.posts.map(function (post) {\n        return React.createElement(Post, {\n          ref: post.id,\n          id: \"post_\".concat(post.id),\n          key: post.id,\n          postID: \"post_\".concat(post.id),\n          user: post.user,\n          body: post.description,\n          imgurLink: post.imgur_link,\n          category: post.category,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Category;\n}(Component);\n\nexport default Category;","map":{"version":3,"sources":["/mnt/c/Users/Ben Brackenbury/CS Project/client/src/Pages/Category/Category.js"],"names":["React","Component","Cookies","axios","Post","cookies","Category","state","category","posts","postCount","sort","sortChange","bind","get","window","location","token","path","props","pathname","alert","split","setState","catch","err","console","error","then","response","data","result","newPostArray","postIDs","map","post","id","uniquePostIDs","Set","uid","resultsWithThisID","payload","push","payloadSum","r","postsWithThisID","p","thisPost","votes","a","b","length","e","target","value","user","description","imgur_link"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Cookies from 'universal-cookie'\r\nimport axios from 'axios'\r\nimport './Category.css'\r\nimport Post from '../../Components/Post/Post'\r\n\r\nconst cookies = new Cookies()\r\n\r\nclass Category extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            category: 'Category',\r\n            posts: [],\r\n            postCount: '',\r\n            sort: ''\r\n        }\r\n        this.sortChange = this.sortChange.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!cookies.get('user')) window.location = '/login'\r\n        let token = cookies.get('token')\r\n        let path = this.props.location.pathname\r\n        if (path == '/category' || path == '/category/') alert('no category provides')\r\n        let category = path.split('/category/')[1]\r\n        this.setState({ category })\r\n        axios.get(`/api/post/category/${category}?token=${token}`)\r\n            .catch(err => console.error(err))\r\n            .then(response => {\r\n                let posts = response.data.result\r\n                let newPostArray = []\r\n\r\n                let postIDs = posts.map(post => post.id)\r\n                let uniquePostIDs = [...new Set(postIDs)]\r\n                uniquePostIDs.map(uid => {\r\n                    let resultsWithThisID = []\r\n                    posts.map(post => {\r\n                        if (post.id == uid && post.payload) {\r\n                            resultsWithThisID.push(post.payload)\r\n                        }\r\n                    })\r\n                    let payloadSum = 0\r\n                    resultsWithThisID.map(r => payloadSum += r)\r\n                    let postsWithThisID = posts.map(p => {\r\n                        if (p.id == uid) return p\r\n                    })\r\n                    let thisPost = {}\r\n                    postsWithThisID.map(p => {\r\n                        if (typeof (p) !== 'undefined') {\r\n                            thisPost = p\r\n                            return\r\n                        }\r\n                    })\r\n                    newPostArray.push({ ...thisPost, votes: payloadSum })\r\n                })\r\n\r\n                newPostArray = newPostArray.sort((a, b) => b.id - a.id)\r\n                let postCount = `${newPostArray.length} ${newPostArray.length == 1 ? 'Post' : 'Posts'}`\r\n                this.setState({ posts: newPostArray, postCount })\r\n            })\r\n    }\r\n\r\n    sortChange(e) {\r\n        let sort = e.target.value\r\n        switch (sort) {\r\n            case 'newest':\r\n                this.setState({ posts: this.state.posts.sort((a, b) => b.id - a.id) })\r\n                break;\r\n\r\n            case 'oldest':\r\n                this.setState({ posts: this.state.posts.sort((a, b) => a.id - b.id) })\r\n                break;\r\n\r\n            case 'votes':\r\n                this.setState({ posts: this.state.posts.sort((a, b) => a.id - b.id) })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Category\">\r\n                <div className=\"header\">\r\n                    <h1>{this.state.category}</h1>\r\n                    <h4>{this.state.postCount}</h4>\r\n                    <select name=\"sort\" id=\"sort-select\" onChange={this.sortChange}>\r\n                        <option value=\"newest\">Newest first</option>\r\n                        <option value=\"oldest\">Oldest first</option>\r\n                        <option value=\"votes\">Most votes</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"PostsView\">\r\n                    {this.state.posts.map(post => (\r\n                        <Post ref={post.id} id={`post_${post.id}`} key={post.id} postID={`post_${post.id}`} user={post.user} body={post.description} imgurLink={post.imgur_link} category={post.category} />\r\n                    ))}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Category"]},"metadata":{},"sourceType":"module"}