{"ast":null,"code":"'use strict'; //This file contains then/promise specific extensions to the core promise API\n\nvar Promise = require('./core.js');\n\nvar nextTick = require('./lib/next-tick');\n\nmodule.exports = Promise;\n/* Static Functions */\n\nPromise.from = function (value) {\n  if (value instanceof Promise) return value;\n  return new Promise(function (resolve) {\n    resolve(value);\n  });\n};\n\nPromise.denodeify = function (fn) {\n  return function () {\n    var self = this;\n    var args = Array.prototype.slice.call(arguments);\n    return new Promise(function (resolve, reject) {\n      args.push(function (err, res) {\n        if (err) reject(err);else resolve(res);\n      });\n      fn.apply(self, args);\n    });\n  };\n};\n\nPromise.nodeify = function (fn) {\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n\n    try {\n      return fn.apply(this, arguments).nodeify(callback);\n    } catch (ex) {\n      if (callback == null) {\n        return new Promise(function (resolve, reject) {\n          reject(ex);\n        });\n      } else {\n        nextTick(function () {\n          callback(ex);\n        });\n      }\n    }\n  };\n};\n/* Prototype Methods */\n\n\nPromise.prototype.done = function (onFulfilled, onRejected) {\n  var self = arguments.length ? this.then.apply(this, arguments) : this;\n  self.then(null, function (err) {\n    nextTick(function () {\n      throw err;\n    });\n  });\n};\n\nPromise.prototype.nodeify = function (callback) {\n  if (callback == null) return this;\n  this.then(function (value) {\n    nextTick(function () {\n      callback(null, value);\n    });\n  }, function (err) {\n    nextTick(function () {\n      callback(err);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}